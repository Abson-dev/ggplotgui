{
    "collab_server" : "",
    "contents" : "ggplot.gui <- function(dataset=NA) {\n  library(shiny)\n  library(plotly)\n  library(stringr)\n\n  ui <- fluidPage(\n\n    headerPanel(\"ggplot.gui\"),\n\n    sidebarPanel(\n      conditionalPanel(condition=\"input.tabs1=='Data upload'\",\n                       h4(\"Enter data\"),\n                       radioButtons(\"dataInput\", \"\", list(\"Load sample data\"=1,\"Upload file\"=2,\"Paste data\"=3, \"Data passed through R environment\"=4),\n                                    selected=if(!is.na(dataset)) 4 else 1),\n                       conditionalPanel(condition=\"input.dataInput=='1'\",\n                                        h5(\"dataset 'mpg' from library(ggplot2) loaded\")\n                       ),\n                       conditionalPanel(condition=\"input.dataInput=='2'\",\n                                        h5(\"Upload delimited text file: \"),\n                                        fileInput(\"upload\", \"\", multiple = FALSE),\n                                        radioButtons(\"fileSepDF\", \"Delimiter:\", list(\"Comma\"=1,\"Tab\"=2,\"Semicolon\"=3)),#, \"Space\"=4))\n                                        HTML('<p>Data in <a href=\"http://en.wikipedia.org/wiki/Delimiter-separated_values\">delimited text files </a> can be separated by comma, tab or semicolon.\n                                             For example, Excel data can be exported in .csv (comma separated) or .tab (tab separated) format. </p>')\n                                        ),\n                       conditionalPanel(condition=\"input.dataInput=='3'\",\n                                        h5(\"Paste data below:\"),\n                                        tags$textarea(id=\"myData\", rows=10, cols=5, \"\"),\n                                        actionButton('clearText_button','Clear data'),\n                                        radioButtons(\"fileSepP\", \"Separator:\", list(\"Comma\"=1,\"Tab\"=2,\"Semicolon\"=3))\n                       )\n        ),\n\n      conditionalPanel(condition=\"input.tabs1=='ggplot' || input.tabs1=='Plotly'\",\n                       h4(\"Create visualization\"),\n                       selectInput(inputId = \"Type\",\n                                   label = \"Type of graph:\",\n                                   choices = c(\"Boxplot\", \"Violin\", \"Density\", \"Histogram\", \"Dot + Error\"),\n                                   selected = \"Boxplot\"),\n                       selectInput('Variable', 'Variable', choices = \"\"),\n                       # Select 2nd variable in list if dataset is large enough\n                       selectInput('Group', 'Group', choices = \"\"),\n                       selectInput('facet_row', 'Facet Row', choices = \"\"), # Only factors\n                       selectInput('facet_col', 'Facet Column', choices = \"\"), # Only factors\n\n                       conditionalPanel(condition = \"input.Type == 'Boxplot' || input.Type == 'Violin' || input.Type == 'Dot + Error'\",\n                                        checkboxInput(inputId = \"jitter\",\n                                                      label = strong(\"Show data points (jittered)\"),\n                                                      value = FALSE)\n                       ),\n                       #conditionalPanel(condition = \"input.Type == 'Dot + Error'\",\n                       #                 checkboxInput(inputId = \"order\",\n                       #                               label = strong(\"Order variable x-axis\"),\n                       #                               value = FALSE)\n                       #),\n                       # Display this only if histogram is selected\n                       conditionalPanel(condition = \"input.Type == 'Density' || input.Type == 'Histogram'\",\n                                        sliderInput(\"alpha\", \"Opaqueness:\", min = 0, max = 1, value = 0.8)\n                       ),\n                       conditionalPanel(condition = \"input.Type == 'Histogram'\",\n                                        numericInput(\"binwidth\", \"Binwidth:\", value=1)\n                       ),\n\n                       ## Display this only if density is selected\n                       conditionalPanel(condition = \"input.Type == 'Density' || input.Type == 'Violin'\",\n                                        sliderInput(inputId = \"bw_adjust\",\n                                                    label = \"Bandwidth adjustment:\",\n                                                    min = 0.01, max = 2, value = 1, step = 0.1)\n                       ),\n                       checkboxInput(inputId = \"label_axes\",\n                                     label = strong(\"Change labels axes\"),\n                                     value = FALSE),\n                       conditionalPanel(condition = \"input.label_axes == true\",\n                                        textInput(\"xaxis\", \"X-axis:\", value=\"label x-axis\")\n                       ),\n                       conditionalPanel(condition = \"input.label_axes == true\",\n                                        textInput(\"yaxis\", \"Y-axis:\", value=\"label y-axis\")\n                       )\n        ),\n        conditionalPanel(condition=\"input.tabs1=='R-code'\",\n                                        h4(\"R-code to build graph\")\n                        )\n      ),\n  mainPanel(\n    tabsetPanel(type = \"tabs\",\n                # Data upload tab\n                tabPanel(\"Data upload\", dataTableOutput(\"filetable\"),\n                         h6(\"This application was created by \", a(\"Gert Stulp\", href=\"http://www.gertstulp.com/\"), \".\n                            Please send bugs and feature requests to g.stulp(at)rug.nl. This application uses the \",\n                            a(\"shiny package from RStudio\", href=\"http://www.rstudio.com/shiny/\"), \".\")\n                ),\n                tabPanel(\"ggplot\", plotOutput('ggPlot')),\n                tabPanel(\"Plotly\", plotlyOutput('trendPlot')),\n                tabPanel(\"R-code\", verbatimTextOutput('Rcode')),\n                id=\"tabs1\"\n                )\n    )\n  )\n\n  server <- function(input, output, session) {\n\n    observe({\n      nms <- names(dataM())\n      nmsContinuous <- names(Filter(function(x) is.integer(x) || is.numeric(x) || is.double(x), dataM())) # Make list of variables that are not factors\n      nmsFactors <- names(Filter(function(x) is.factor(x) || is.logical(x) || is.character(x), dataM())) # Make list of variables that are not factors\n\n      avail_con <- if(identical(nmsContinuous, character(0))) c(\"No continuous vars available\" = '.') else c(nmsContinuous)\n      avail_fac <- if(identical(nmsFactors, character(0))) c(\"No factors available\" = '.') else c(\"No groups\" = '.', nmsFactors)\n\n      updateSelectInput(session, \"Variable\", choices = avail_con)\n      updateSelectInput(session, \"Group\", choices = avail_fac)\n      updateSelectInput(session, 'facet_row',  choices = avail_fac) # Only factors\n      updateSelectInput(session, 'facet_col',  choices = avail_fac) # Only factors\n    })\n\n    stringCode <- reactive({\n\n      if(input$Type==\"Histogram\") {\n        if(input$Group != \".\") {\n          p <- \"ggplot(df, aes(x = input$Variable)) + geom_histogram(aes(fill = input$Group), position = 'identity', alpha = input$alpha, binwidth = input$binwidth)\"\n        } else if(input$Group == \".\") {\n          p <- \"ggplot(df, aes(x = input$Variable)) + geom_histogram(position = 'identity', alpha = input$alpha, binwidth = input$binwidth)\"\n        }\n      } else if(input$Type==\"Density\") {\n        if(input$Group != \".\") {\n          p <- \"ggplot(df, aes(x = input$Variable)) + geom_density(aes(fill = input$Group), position = 'identity', alpha = input$alpha, adjust = input$bw_adjust)\"\n        } else if(input$Group == \".\") {\n          p <- \"ggplot(df, aes(x = input$Variable)) + geom_density(position = 'identity', alpha = input$alpha, adjust = input$bw_adjust)\"\n        }\n      } else if(input$Type==\"Boxplot\") {\n        if(input$Group != \".\") {\n          p <- \"ggplot(df, aes(y = input$Variable, x = input$Group)) + geom_boxplot()\"\n        } else if(input$Group == \".\") {\n          p <- \"ggplot(df, aes(y = input$Variable, x = ' ')) + geom_boxplot()\"\n        }\n        if(input$jitter) p <- paste(p, \"+\", \"geom_jitter(size = 1, alpha = 0.2, width = 0.25, colour = 'blue')\")\n      } else if(input$Type==\"Violin\") {\n        if(input$Group != \".\") {\n          p <- \"ggplot(df, aes(y = input$Variable, x = input$Group)) + geom_violin(adjust = input$bw_adjust)\"\n        } else if(input$Group == \".\") {\n          p <- \"ggplot(df, aes(y = input$Variable, x = ' ')) + geom_violin(adjust = input$bw_adjust)\"\n        }\n        if(input$jitter) p <- paste(p, \"+\", \"geom_jitter(size = 1, alpha = 0.2, width = 0.25, colour = 'blue')\")\n      } else if(input$Type==\"Dot + Error\") {\n        if(input$Group != \".\") {\n          p <- \"ggplot(df, aes(y = input$Variable, x = input$Group)) + geom_point(stat = 'summary', fun.y = 'mean') + geom_errorbar(stat = 'summary', fun.data = 'mean_se', width=0, fun.args = list(mult = 1.96))\"\n        } else if(input$Group == \".\") {\n          p <- \"ggplot(df, aes(y = input$Variable, x = ' ')) + geom_point(stat = 'summary', fun.y = 'mean') + geom_errorbar(stat = 'summary', fun.data = 'mean_se', width=0, fun.args = list(mult = 1.96))\"\n        }\n        if(input$jitter) p <- paste(p, \"+\", \"geom_jitter(size = 1, alpha = 0.2, width = 0.25, colour = 'blue')\")\n      }\n\n      # This sorts x-axis according to means on y-axis\n      #if(input$order) {\n      #  p <- paste(p, \"+\", \"scale_x_discrete(limits=dataset()[['input$Group']][order(dataset()[['Mean']])])\") # Dit sorteert de x-as op grootte\n      #}\n\n      # if at least one facet column/row is specified, add it\n      facets <- paste(input$facet_row, '~', input$facet_col)\n      if (facets != '. ~ .') p <- paste(p, \"+\", \"facet_grid(\", facets, \")\")\n\n      # if labels specified\n      if(input$label_axes) p <- paste(p, \"+\", \"labs(x='input$xaxis', y='input$yaxis')\")\n\n      p <- paste(p, \"+ theme_bw() + theme(axis.text.x = element_text(angle = 45, hjust = 1))\")\n\n      # Replace name of variables by values\n      p <- str_replace_all(p, \"input\\\\$Variable\", input$Variable)\n      p <- str_replace_all(p, \"input\\\\$Group\", input$Group)\n      p <- str_replace_all(p, \"input\\\\$binwidth\", as.character(input$binwidth))\n      p <- str_replace_all(p, \"input\\\\$bw_adjust\", as.character(input$bw_adjust))\n      p <- str_replace_all(p, \"input\\\\$alpha\", as.character(input$alpha))\n      p <- str_replace_all(p, \"input\\\\$xaxis\", as.character(input$xaxis))\n      p <- str_replace_all(p, \"input\\\\$yaxis\", as.character(input$yaxis))\n\n      p\n    })\n\n    output$ggPlot <- renderPlot({\n\n      # evaluate the string RCode as code\n      df <- dataM()\n      p <- eval(parse(text=stringCode()))\n\n      p\n\n    })\n\n    output$trendPlot <- renderPlotly({\n\n      # evaluate the string RCode as code\n      df <- dataM()\n      p <- eval(parse(text=stringCode()))\n\n      ggplotly(p)\n\n    })\n\n    # Give the R-code as output\n    output$Rcode <- renderText({\n\n      begin_text <- \"# You can use the below code to generate the graph\\n# Don't forget to replace the 'df' with the name of your dataframe\"\n      package_text <- paste(\"# You need the following package(s): \\n\", \"library(ggplot2)\", sep=\"\")\n      graph_text <- \"# The code below will generate the graph:\"\n      gg_text <- stringCode()\n      gg_text <- str_replace_all(gg_text, \"\\\\+ \", \"+\\n  \")\n      gg_text <- paste(\"graph <- \", gg_text, \"\\ngraph\", sep=\"\")\n      package_plotly_text <- paste(\"# If you want the plot to be interactive, you need the following package(s): \\n\", \"library(plotly)\", sep=\"\")\n      plotly_text <- paste(\"ggplotly(graph)\")\n      save_text <- \"# If you would like to save your graph, you can use:\"\n      save_code <- \"ggsave('my_graph.pdf', graph, width = 10, height = 10, unit = 'cm')\"\n\n      paste(begin_text,\n            \"\\n\\n\",\n            package_text,\n            \"\\n\\n\",\n            graph_text,\n            \"\\n\",\n            gg_text,\n            \"\\n\\n\",\n            package_plotly_text,\n            \"\\n\\n\",\n            plotly_text,\n            \"\\n\\n\",\n            save_text,\n            \"\\n\",\n            save_code,\n            sep=\"\")\n\n    })\n\n    # *** Read in data matrix ***\n    dataM <- reactive({\n      if(input$dataInput==1){\n        data(mpg, package = \"ggplot2\")\n        df <- mpg\n        data <- df\n      } else if(input$dataInput==2){\n        inFile <- input$upload\n        # Avoid error message while file is not uploaded yet\n        if (is.null(input$upload))  {return(NULL)}\n        # Get the separator\n        mySep<-switch(input$fileSepDF, '1'=\",\",'2'=\"\\t\",'3'=\";\", '4'=\"\") #list(\"Comma\"=1,\"Tab\"=2,\"Semicolon\"=3)\n        data<-read.table(inFile$datapath, sep=mySep, header=TRUE, fill=TRUE)\n      } else if(input$dataInput==3) { # To be looked into again - for special case when last column has empty entries in some rows\n        if(is.null(input$myData)) {return(NULL)}\n        tmp<-matrix(strsplit(input$myData, \"\\n\")[[1]])\n        mySep<-switch(input$fileSepP, '1'=\",\",'2'=\"\\t\",'3'=\";\")\n        myColnames<-strsplit(tmp[1], mySep)[[1]]\n        data<-matrix(0, length(tmp)-1, length(myColnames))\n        colnames(data)<-myColnames\n        for(i in 2:length(tmp)){\n          myRow<-as.numeric(strsplit(paste(tmp[i],mySep,mySep,sep=\"\"), mySep)[[1]])\n          data[i-1,]<-myRow[-length(myRow)]\n        }\n        data<-data.frame(data)\n      } else if(input$dataInput==4){\n        data <- dataset\n      }\n      return(data)\n    })\n\n    ## *** Data in table ***\n    output$filetable <- renderDataTable(\n      #print(nrow(dataM()))\n      #if(nrow(dataM())<500){\n      #  return(dataM())\n      #} else {return(dataM()[1:100,])}\n      dataM()\n    )\n  }\n  shinyApp(ui, server)\n}\n#exploration_distributions(mpg)\n#exploration_distributions(mtcars)\nggplot.gui(mpg)\n",
    "created" : 1497614579878.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3886082741",
    "id" : "10DCB178",
    "lastKnownWriteTime" : 1497615916,
    "last_content_update" : 1497615916567,
    "path" : "~/Google Drive/GitHub/ggplot.gui/R/ggplot.gui.R",
    "project_path" : "R/ggplot.gui.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}